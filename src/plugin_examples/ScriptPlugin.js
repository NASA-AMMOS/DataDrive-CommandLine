const path = require('path');
const util = require('util');
const exec = util.promisify(require('child_process').exec);
const entrypointDir = path.dirname(require.main.filename);
const { FileMetadata }  = require(path.join(entrypointDir, 'core/DdFileMetadata.js'));
const DdLogger = require(path.join(entrypointDir, 'core/DdLogger.js')).logger;
const DdPlugin = require(path.join(entrypointDir, 'core/DdPlugin.js'));

class ScriptPlugin extends DdPlugin {
    constructor(config) {
        super();
        this.config = config;
    }
    
    /**
     * 
     * @param {FileMetadata} item 
     */
    async processItem(item) {
        try {
            // item is a JSON object and has the following attributes
            // ocs_updated_at: DateTime of the event
            // ocs_full_name: Full OCS path; includes ocs path and filename
            // ocs_dataset_id: Unique ID of the item
            // ocs_package_id: Unique ID of the OCS package
            // ocs_url: S3 URL where the file resides
            // ocs_path: Path in OCS, excludes the file name
            // ocs_owner: Owner of the file in OCS, Note: ONLY available if event_type is PLAYBACK
            // download_url: Download URL generated by PEP
            // event_type: Event type, can be of two types OCS or PLAYBACK
            // ocs_name: File name
            await exec(`echo "${JSON.stringify(item)}" >> tmp/test.txt`);
        } catch (error) {
            DdLogger.error(error.stderr);
        }
        DdLogger.info(`${item.ocs_full_name} was called in ScriptPlugin`);
    }
}

module.exports = ScriptPlugin;